package cmd

import (
	"errors"
	"fmt"

	helper "github.com/home-assistant/cli/client"
	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
)

var addonsLogsCmd = &cobra.Command{
	Use:     "logs [slug]",
	Aliases: []string{"log", "lg"},
	Short:   "View the log output of a running Home Assistant add-on",
	Long: `
Allowing you to look at the log output generated by a Home Assistant add-on.
`,
	Example: `
  ha addons logs core_ssh
`,
	ValidArgsFunction: addonsCompletions,
	Args:              cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		log.WithField("args", args).Debug("addons logs")

		section := "addons"
		command := "{slug}/logs"

		boot, _ := cmd.Flags().GetString("boot")
		if len(boot) > 0 {
			command += "/boots/{boot}"
		}

		follow, _ := cmd.Flags().GetBool("follow")
		if follow {
			command += "/follow"
		}

		url, err := helper.URLHelper(section, command)

		if err != nil {
			fmt.Println(err)
			ExitWithError = true
			return
		}

		accept := "text/plain"
		verbose, _ := cmd.Flags().GetBool("verbose")
		if verbose {
			accept = "text/x-log"
		}

		/* Disable timeouts to allow following forever */
		request := helper.GetRequestTimeout(0).SetHeader("Accept", accept).SetDoNotParseResponse(true)

		lines, _ := cmd.Flags().GetInt32("lines")
		if lines > 0 {
			rangeHeader := fmt.Sprintf("entries=:%d:", -(lines - 1))
			log.WithField("value", rangeHeader).Debug("Range header")
			request.SetHeader("Range", rangeHeader)
		}

		request.SetPathParam("boot", boot)

		slug := args[0]

		request.SetPathParams(map[string]string{
			"slug": slug,
		})

		resp, err := request.Get(url)

		// returns 200 OK or 400, everything else is wrong
		if err == nil && resp.StatusCode() != 200 && resp.StatusCode() != 400 {
			err = errors.New("Unexpected server response")
			log.Error(err)
		}

		if err != nil {
			fmt.Println(err)
			ExitWithError = true
			return
		}

		ExitWithError = !helper.StreamTextResponse(resp)
	},
}

func init() {
	addonsLogsCmd.Flags().BoolP("follow", "f", false, "Continuously print new log entries")
	addonsLogsCmd.Flags().Int32P("lines", "n", 0, "Number of log entries to show")
	addonsLogsCmd.Flags().StringP("boot", "b", "", "Logs of particular boot ID")
	addonsLogsCmd.Flags().BoolP("verbose", "v", false, "Return logs in verbose format")
	addonsLogsCmd.Flags().Lookup("follow").NoOptDefVal = "true"
	addonsLogsCmd.Flags().Lookup("verbose").NoOptDefVal = "true"

	addonsCmd.AddCommand(addonsLogsCmd)
}
