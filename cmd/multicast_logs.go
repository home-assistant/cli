package cmd

import (
	"fmt"

	helper "github.com/home-assistant/cli/client"
	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
)

var multicastLogsCmd = &cobra.Command{
	Use:     "logs",
	Aliases: []string{"log", "lg"},
	Short:   "View the log output of the Home Assistant Multicast server",
	Long: `
Allowing you to look at the log output generated by the Home Assistant Multicast server.
`,
	Example: `
  ha multicast logs
`,
	ValidArgsFunction: cobra.NoFileCompletions,
	Args:              cobra.NoArgs,
	Run: func(cmd *cobra.Command, args []string) {
		log.WithField("args", args).Debug("multicast logs")

		section := "multicast"
		command := "logs"

		boot, _ := cmd.Flags().GetString("boot")
		if len(boot) > 0 {
			command += "/boots/{boot}"
		}

		follow, _ := cmd.Flags().GetBool("follow")
		if follow {
			command += "/follow"
		}

		url, err := helper.URLHelper(section, command)
		if err != nil {
			fmt.Printf("Error: %v", err)
			return
		}

		accept := "text/plain"
		verbose, _ := cmd.Flags().GetBool("verbose")
		if verbose {
			accept = "text/x-log"
		}

		/* Disable timeouts to allow following forever */
		request := helper.GetRequestTimeout(0).SetHeader("Accept", accept).SetDoNotParseResponse(true)

		lines, _ := cmd.Flags().GetInt32("lines")
		if lines > 0 {
			rangeHeader := fmt.Sprintf("entries=:%d:", -(lines - 1))
			log.WithField("value", rangeHeader).Debug("Range header")
			request.SetHeader("Range", rangeHeader)
		}

		request.SetPathParam("boot", boot)

		resp, err := request.Get(url)

		if err != nil {
			fmt.Println(err)
			ExitWithError = true
			return
		}

		ExitWithError = !helper.StreamTextResponse(resp)
	},
}

func init() {
	multicastLogsCmd.Flags().BoolP("follow", "f", false, "Continuously print new log entries")
	multicastLogsCmd.Flags().Int32P("lines", "n", 0, "Number of log entries to show")
	multicastLogsCmd.Flags().StringP("boot", "b", "", "Logs of particular boot ID")
	multicastLogsCmd.Flags().BoolP("verbose", "v", false, "Return logs in verbose format")
	multicastLogsCmd.Flags().Lookup("follow").NoOptDefVal = "true"
	multicastLogsCmd.Flags().Lookup("verbose").NoOptDefVal = "true"

	multicastCmd.AddCommand(multicastLogsCmd)
}
