package cmd

import (
	"fmt"
	"io"

	helper "github.com/home-assistant/cli/client"
	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
)

var hostLogsCmd = &cobra.Command{
	Use:     "logs",
	Aliases: []string{"log", "lg"},
	Short:   "View the log output of the host kernel logs/dmesg",
	Long: `
Allowing you to look at the log output generated by the host kernel.
`,
	Example: `
  ha host logs
`,
	ValidArgsFunction: cobra.NoFileCompletions,
	Args:              cobra.NoArgs,
	Run: func(cmd *cobra.Command, args []string) {
		log.WithField("args", args).Debug("host logs")

		section := "host"
		command := "logs/entries"

		identifier, _ := cmd.Flags().GetString("identifier")
		boot, _ := cmd.Flags().GetString("boot")
		if len(identifier) > 0 && len(boot) > 0 {
			command = "logs/boot/{boot}/{identifier}/entries"
		} else if len(boot) > 0 {
			command = "logs/boot/{boot}/entries"
		} else if len(identifier) > 0 {
			command = "logs/{identifier}/entries"
		}

		follow, _ := cmd.Flags().GetBool("follow")
		if follow {
			command += "/follow"
		}

		url, err := helper.URLHelper(section, command)
		if err != nil {
			fmt.Printf("Error: %v", err)
			return
		}

		/* Disable timeouts to allow following forever */
		request := helper.GetRequestTimeout(0)

		lines, _ := cmd.Flags().GetInt32("lines")
		if follow {
			/* In follow mode, show only last 20 lines by default */
			if lines == 0 {
				lines = 20
			}
			request.SetHeader("Range", fmt.Sprintf("entries=:%d:", -(lines-1)))
		} else if lines > 0 {
			request.SetHeader("Range", fmt.Sprintf("entries=:%d:%d", -(lines-1), lines))
		}

		request.SetPathParam("identifier", identifier)
		request.SetPathParam("boot", boot)

		resp, err := request.SetHeader("Accept", "text/plain").SetDoNotParseResponse(true).Get(url)

		if err != nil {
			fmt.Println(err)
			ExitWithError = true
			return
		}

		for {
			p := make([]byte, 4096)
			n, err := resp.RawBody().Read(p)
			if err == io.EOF {
				break
			}
			fmt.Print(string(p[:n]))
		}
	},
}

func init() {
	hostLogsCmd.Flags().BoolP("follow", "f", false, "Continuously print new log entries")
	hostLogsCmd.Flags().Int32P("lines", "n", 0, "Number of log entries to show")
	hostLogsCmd.Flags().StringP("identifier", "t", "", "Show entries with the specified syslog identifier")
	hostLogsCmd.Flags().StringP("boot", "b", "", "Logs of particular boot ID")
	hostCmd.AddCommand(hostLogsCmd)
}
